// src/components/InlineAiChatWidget.jsx
import { useEffect, useRef, useState } from "react";

const API_BASE = "http://127.0.0.1:8000/api";

// C√°c ch·∫ø ƒë·ªô ƒë·ªÉ ch·ªçn
const MODES = [
  {
    id: "general",
    label: "Chat t·ªïng h·ª£p",
    system:
      "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán, l·ªãch s·ª±, tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát. Khi ch∆∞a ƒë·ªß th√¥ng tin th√¨ h·ªèi l·∫°i.",
  },
  {
    id: "shopping",
    label: "T∆∞ v·∫•n mua h√†ng",
    system:
      "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng. H·ªèi nhu c·∫ßu, ng√¢n s√°ch, size, m√†u, ch·∫•t li·ªáu; sau ƒë√≥ g·ª£i √Ω 2-3 h∆∞·ªõng ph√π h·ª£p (kh√¥ng b·ªãa t·ªìn kho).",
  },
  {
    id: "order",
    label: "CSKH / Tra c·ª©u ƒë∆°n",
    system:
      "B·∫°n h·ªó tr·ª£ kh√°ch tra c·ª©u/t∆∞ v·∫•n ƒë∆°n h√†ng. KH√îNG b·ªãa th√¥ng tin; h∆∞·ªõng d·∫´n kh√°ch v√†o trang 'T√†i kho·∫£n -> ƒê∆°n h√†ng' ƒë·ªÉ xem chi ti·∫øt. N·∫øu kh√°ch ƒë∆∞a m√£ ƒë∆°n, y√™u c·∫ßu th√™m email/sƒët ƒë·ªÉ x√°c th·ª±c.",
  },
];

export default function InlineAiChatWidget({ buttonLabel = "üí¨ Tr·ª£ l√Ω AI" }) {
  const [open, setOpen] = useState(false);
  const [mode, setMode] = useState(() => localStorage.getItem("ai_chat_mode") || "general");
  const [messages, setMessages] = useState(() => {
    const saved = localStorage.getItem("ai_chat_inline_messages");
    return saved
      ? JSON.parse(saved)
      : [{ role: "assistant", content: "Xin ch√†o üëã M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?" }];
  });
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);

  const panelRef = useRef(null);
  const wrapRef = useRef(null);
  const bottomRef = useRef(null);

  useEffect(() => {
    localStorage.setItem("ai_chat_inline_messages", JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    localStorage.setItem("ai_chat_mode", mode);
  }, [mode]);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading, open]);

  // Click ra ngo√†i ƒë·ªÉ ƒë√≥ng
  useEffect(() => {
    function handleClickOutside(e) {
      if (!open) return;
      const p = panelRef.current;
      const w = wrapRef.current;
      if (p && w && !p.contains(e.target) && !w.contains(e.target)) {
        setOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [open]);

  async function sendMessage(e) {
    e?.preventDefault?.();
    const text = input.trim();
    if (!text) return;

    const userMsg = { role: "user", content: text };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setLoading(true);

    const sys = MODES.find((m) => m.id === mode)?.system ?? MODES[0].system;

    try {
      const res = await fetch(`${API_BASE}/ai/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          system: sys,
          messages: [...messages, userMsg],
        }),
      });
      const data = await res.json();
      const aiText = data?.message ?? "Xin l·ªói, m√¨nh ch∆∞a nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.";
      setMessages((prev) => [...prev, { role: "assistant", content: aiText }]);
    } catch (err) {
      console.error(err);
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: "C√≥ l·ªói khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i." },
      ]);
    } finally {
      setLoading(false);
    }
  }

  function clearChat() {
    setMessages([{ role: "assistant", content: "ƒê√£ xo√° l·ªãch s·ª≠. B·∫°n h·ªèi g√¨ ti·∫øp nh√©!" }]);
    localStorage.removeItem("ai_chat_inline_messages");
  }

  return (
    <div style={{ position: "relative", display: "inline-block" }}>
      {/* N√öT: ƒë·∫∑t ·ªü c·∫°nh ph·∫£i */}
      <button
        ref={wrapRef}
        onClick={() => setOpen((o) => !o)}
        style={{
          padding: "10px 14px",
          borderRadius: 10,
          border: "1px solid #d1d5db",
          background: "#fff",
          cursor: "pointer",
          fontWeight: 600,
          boxShadow: "0 2px 8px rgba(0,0,0,0.06)",
        }}
        title="M·ªü tr·ª£ l√Ω AI"
      >
        {buttonLabel}
      </button>

      {/* PANEL: x·ªï ra th√†nh c·ª≠a s·ªï nh·ªè */}
      {open && (
        <div
          ref={panelRef}
          style={{
            position: "absolute",
            right: 0,
            bottom: "56px", // m·ªü l√™n ph√≠a tr√™n n√∫t
            width: 380,
            height: 420,
            zIndex: 20,
            border: "1px solid #e5e7eb",
            borderRadius: 12,
            background: "#fff",
            boxShadow: "0 12px 24px rgba(0,0,0,0.12)",
            display: "flex",
            flexDirection: "column",
          }}
        >
          {/* Header */}
          <div
            style={{
              padding: "10px 12px",
              borderBottom: "1px solid #eee",
              display: "flex",
              alignItems: "center",
              gap: 8,
              justifyContent: "space-between",
            }}
          >
            <strong>AI Chat</strong>
            <select
              value={mode}
              onChange={(e) => setMode(e.target.value)}
              style={{ border: "1px solid #ddd", borderRadius: 8, padding: "4px 6px", fontSize: 13 }}
              title="Ch·ªçn ch·∫ø ƒë·ªô"
            >
              {MODES.map((m) => (
                <option key={m.id} value={m.id}>
                  {m.label}
                </option>
              ))}
            </select>
            <div style={{ display: "flex", gap: 8 }}>
              <button onClick={clearChat} style={{ fontSize: 12, color: "#666" }}>
                Clear
              </button>
              <button onClick={() => setOpen(false)} style={{ fontSize: 18, lineHeight: 1 }}>
                √ó
              </button>
            </div>
          </div>

          {/* Messages */}
          <div style={{ flex: 1, overflowY: "auto", padding: 12, background: "#f9fafb" }}>
            {messages.map((m, i) => (
              <div
                key={i}
                style={{
                  maxWidth: "85%",
                  padding: "10px 12px",
                  borderRadius: 14,
                  boxShadow: "0 1px 4px rgba(0,0,0,0.06)",
                  margin: "6px 0",
                  marginLeft: m.role === "user" ? "auto" : 0,
                  color: m.role === "user" ? "#fff" : "#111",
                  background: m.role === "user" ? "#2563eb" : "#fff",
                }}
              >
                <pre style={{ whiteSpace: "pre-wrap", wordBreak: "break-word", margin: 0, fontFamily: "inherit" }}>
                  {m.content}
                </pre>
              </div>
            ))}
            {loading && (
              <div
                style={{
                  maxWidth: "85%",
                  padding: "10px 12px",
                  borderRadius: 14,
                  boxShadow: "0 1px 4px rgba(0,0,0,0.06)",
                  margin: "6px 0",
                  background: "#fff",
                  color: "#666",
                }}
              >
                ƒêang so·∫°n‚Ä¶
              </div>
            )}
            <div ref={bottomRef} />
          </div>

          {/* Input */}
          <form onSubmit={sendMessage} style={{ borderTop: "1px solid #eee", display: "flex", gap: 8, padding: 10 }}>
            <input
              placeholder="Nh·∫≠p c√¢u h·ªèi‚Ä¶"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              style={{
                flex: 1,
                border: "1px solid #ddd",
                borderRadius: 10,
                padding: "10px 12px",
                outline: "none",
              }}
            />
            <button
              type="submit"
              disabled={loading}
              style={{
                border: "none",
                borderRadius: 10,
                padding: "10px 14px",
                background: loading ? "#93c5fd" : "#2563eb",
                color: "#fff",
                cursor: loading ? "not-allowed" : "pointer",
                fontWeight: 600,
              }}
            >
              G·ª≠i
            </button>
          </form>
        </div>
      )}
    </div>
  );
}
