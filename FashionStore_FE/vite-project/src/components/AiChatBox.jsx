// src/components/AiChatBox.jsx
import { useEffect, useRef, useState } from "react";

const API_BASE = "http://127.0.0.1:8000/api";

// C√°c ch·∫ø ƒë·ªô c√≥ s·∫µn (m·ª•c ƒë·ªÉ ch·ªçn)
const MODES = [
  {
    id: "general",
    label: "Chat t·ªïng h·ª£p",
    system:
      "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán, l·ªãch s·ª±, tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát. Khi ch∆∞a ƒë·ªß th√¥ng tin th√¨ h·ªèi l·∫°i.",
  },
  {
    id: "shopping",
    label: "T∆∞ v·∫•n mua h√†ng",
    system:
      "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng. H·ªèi nhu c·∫ßu, ng√¢n s√°ch, size, m√†u, ch·∫•t li·ªáu; sau ƒë√≥ g·ª£i √Ω 3 s·∫£n ph·∫©m ph√π h·ª£p (n√≥i chung chung, KH√îNG b·ªãa d·ªØ li·ªáu t·ªìn kho).",
  },
  {
    id: "order",
    label: "CSKH / Tra c·ª©u ƒë∆°n",
    system:
      "B·∫°n h·ªó tr·ª£ kh√°ch tra c·ª©u/t∆∞ v·∫•n ƒë∆°n h√†ng. KH√îNG b·ªãa th√¥ng tin ƒë∆°n; h∆∞·ªõng d·∫´n kh√°ch v√†o trang 'T√†i kho·∫£n -> ƒê∆°n h√†ng' ƒë·ªÉ xem chi ti·∫øt. N·∫øu kh√°ch ƒë∆∞a m√£ ƒë∆°n, y√™u c·∫ßu th√™m email/sƒët ƒë·ªÉ x√°c th·ª±c.",
  },
];

export default function AiChatBox({ startOpen = false }) {
  const [open, setOpen] = useState(startOpen);
  const [mode, setMode] = useState(() => localStorage.getItem("ai_chat_mode") || "general");
  const [messages, setMessages] = useState(() => {
    const saved = localStorage.getItem("ai_chat_messages");
    return saved
      ? JSON.parse(saved)
      : [{ role: "assistant", content: "Xin ch√†o üëã M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?" }];
  });
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const bottomRef = useRef(null);

  useEffect(() => {
    localStorage.setItem("ai_chat_messages", JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    localStorage.setItem("ai_chat_mode", mode);
  }, [mode]);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading, open]);

  async function sendMessage(e) {
    e?.preventDefault?.();
    const text = input.trim();
    if (!text) return;

    const userMsg = { role: "user", content: text };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setLoading(true);

    // L·∫•y system theo ch·∫ø ƒë·ªô ƒë√£ ch·ªçn
    const sys = MODES.find((m) => m.id === mode)?.system ?? MODES[0].system;

    try {
      const res = await fetch(`${API_BASE}/ai/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          system: sys,
          messages: [...messages, userMsg],
        }),
      });
      const data = await res.json();
      const aiText = data?.message ?? "Xin l·ªói, m√¨nh ch∆∞a nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.";
      setMessages((prev) => [...prev, { role: "assistant", content: aiText }]);
    } catch (err) {
      console.error(err);
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: "C√≥ l·ªói khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i." },
      ]);
    } finally {
      setLoading(false);
    }
  }

  function clearChat() {
    setMessages([{ role: "assistant", content: "ƒê√£ xo√° l·ªãch s·ª≠. B·∫°n h·ªèi g√¨ ti·∫øp nh√©!" }]);
    localStorage.removeItem("ai_chat_messages");
  }

  return (
    <>
      {/* N√∫t tr√≤n n·ªïi m·ªü/ƒë√≥ng chat */}
      <button
        onClick={() => setOpen((o) => !o)}
        className="fixed bottom-5 right-5 z-50 rounded-full shadow-lg px-4 py-3 bg-blue-600 text-white hover:bg-blue-700"
        title="AI Chat"
        aria-label="AI Chat"
      >
        {open ? "‚úñ" : "AI"}
      </button>

      {/* H·ªôp chat */}
      {open && (
        <div className="fixed bottom-20 right-5 z-50 w-96 h-[70vh] max-h-[600px] bg-white border shadow-xl rounded-2xl flex flex-col">
          <div className="px-4 py-3 border-b flex items-center justify-between gap-2">
            <div className="font-semibold">AI Chat</div>

            {/* M·ª•c ch·ªçn ch·∫ø ƒë·ªô */}
            <select
              value={mode}
              onChange={(e) => setMode(e.target.value)}
              className="border rounded-lg px-2 py-1 text-sm"
              title="Ch·ªçn ch·∫ø ƒë·ªô"
            >
              {MODES.map((m) => (
                <option key={m.id} value={m.id}>
                  {m.label}
                </option>
              ))}
            </select>

            <div className="flex items-center gap-2">
              <button
                onClick={clearChat}
                className="text-sm text-gray-500 hover:text-red-600"
                title="Xo√° l·ªãch s·ª≠ chat"
              >
                Clear
              </button>
              <button onClick={() => setOpen(false)} className="text-lg leading-none">
                √ó
              </button>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-3 bg-gray-50 space-y-2">
            {messages.map((m, i) => (
              <div
                key={i}
                className={`max-w-[85%] p-3 rounded-2xl shadow ${
                  m.role === "user" ? "ml-auto bg-blue-600 text-white" : "mr-auto bg-white"
                }`}
              >
                <pre className="whitespace-pre-wrap break-words font-sans">{m.content}</pre>
              </div>
            ))}
            {loading && (
              <div className="mr-auto bg-white p-3 rounded-2xl shadow text-gray-500">ƒêang so·∫°n‚Ä¶</div>
            )}
            <div ref={bottomRef} />
          </div>

          <form onSubmit={sendMessage} className="p-3 border-t flex gap-2">
            <input
              className="flex-1 border rounded-xl px-3 py-2 focus:outline-none focus:ring ring-blue-300"
              placeholder="Nh·∫≠p c√¢u h·ªèi‚Ä¶"
              value={input}
              onChange={(e) => setInput(e.target.value)}
            />
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 rounded-xl bg-blue-600 text-white disabled:opacity-50"
            >
              G·ª≠i
            </button>
          </form>
        </div>
      )}
    </>
  );
}
